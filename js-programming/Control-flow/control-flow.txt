This introduces different comparison operators such as ==, !=, >, <, etc that can be used in JavaScript and which data types they can be applied to.

The conditions tested are specified using comparison operators. These operators cause the immediate statement in which they are contained to return a Boolean value of either true or false.

The following comparison operators are available:

Equality: ==, or Inequality: != of any primitive data type (int, char, float, bool, etc.) These are binary operators (take two operands) and are specified using infix notation (which means that the operator goes in between the two operands).
Greater-than: >, Greater than or equal to: >=, Less-than: < and Less than or equal to: <= are also binary operators using infix notation.
Negation: ! is a unary operator, and prefixes the operand.
Examples
Statement	Result
10 == 10	true
9 != 6	true
!true	false
10 > 12	false
 

Now that you’re familiar with the comparison operators let’s look at the conditional statements.

As the name implies, conditional statements specify whether another statement or block of statements should be executed or not. These are often called “selection constructs”. The two general types are:

"if…then"
the "switch…case" construct
if, if-else and Nested if…else
There are three forms of if…else statements in JavaScript.

if statement
if...else statement
if...else if...else statement
if statement

The syntax of the if statement is:

if (condition) {
   // body of if statement
}
The if statement evaluates the condition inside the parentheses ( ).

If the condition evaluates to true, the code inside the body of if is executed.
If the condition evaluates to false, the code inside the body of if is skipped.
Example:

//Suppose num1 = 0 and num2 = 1,
if(num1 == 0){
    console.log("num1 is equal to 0")
}
if(num2 == 0){
    console.log("num1 is equal to 0")
}
// Body of first if is executed.
// prints num1 is equal to 0
if…else statement

The if statement can have an optional else clause. Its syntax is:

if (condition) {
    // block of code if condition is true
}
else {
    // block of code if condition is false
}
If the condition evaluates true,

the code inside the body of if is executed
the code inside the body of else is skipped from execution
If the condition evaluates false,

the code inside the body of else is executed
the code inside the body of if is skipped from execution
Example:

int num = 1;
if(num == 0){
    console.log("num is equal to 0")
}
else{
    console.log("num is not equal to 0")
}
// Body of else is executed.
// prints num is not equal to 0
if…else…else if statement

The if...else statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the if...else if...else statement.

The syntax of the if...else if...else statement is:

if (condition1) {
    // code block 1
}
else if (condition2){
    // code block 2
}
else {
    // code block 3
}
Here,

If condition1 evaluates to true, code block 1 is executed.
If condition1 evaluates to false, then condition2 is evaluated.
If condition2 is true, code block 2 is executed.
If condition2 is false, the code block 3 is executed
Example:

int num = 0;
if(num > 0){
    console.log("num is greater than 0");
}
else if(num < 0){
    console.log("num is lesser than 0")
}
else{
   console.log("num is equal to 0")
}
// Body of else is executed.
// prints num is not equal to 0


____________________________________________________________________________________________________________________________________________________________________________________________


The switch statement allows us to execute a block of code among many alternatives.

The syntax of the switch statement in JavaScript is:

switch (expression) {  
    case constant1:  
        // code to be executed if   
        // expression is equal to constant1;  
        break;  

    case constant2:  
        // code to be executed if  
        // expression is equal to constant2;  
        break;  
        .  
        .  
        .  
    default:  
        // code to be executed if  
        // expression doesn't match any constant  
}
The expression is evaluated once and compared with the values of each case label.

If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to constant2, the code after case constant2: is executed until the break statement is encountered.
If there is no match, the code after default: is executed.
Note: We can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write.

Flowchart of switch Statement


Example:
var x = 2;   
switch (x)   
{   
    case 1:   
        console.log("Choice is 1"); 
        break;   
    case 2:   
        console.log("Choice is 2");   
        break;   
    case 3:   
        console.log("Choice is 3");   
        break;   
    default:   
        console.log("Choice other than 1, 2 and 3");   
        break;   
}
Notice that the break statement is used inside each case block. This terminates the switch statement.

If the break statement is not used, all cases after the correct case are executed.

____________________________________________________________________________________________________________________________________________________________________________________________


In computer programming, loops are used to repeat a block of code.

For example, let’s say we want to show a message 100 times. Then instead of writing the print statement 100 times, we can use a loop.

That was just a simple example; we can achieve much more efficiency and sophistication in our programs by making effective use of loops.

Here we will see 3 types of loops:

for loop
while loop
do...while loop
for loop
The syntax of for-loop is:

for (initialization; condition; update) {
    // body of-loop 
}
Here,

initialization - initializes variables and is executed only once
condition - if true, the body of for loop is executed, if false, the for loop is terminated
update - updates the value of initialized variables and again checks the condition
Flowchart of for Loop



Example:

for(var i = 1; i <= 5; i++){
   console.log(i + " ");
}
// Prints 1 2 3 4 5 
While loop
The syntax of while loop is:

while (condition) {
    statememt(s);
}
Here, statement(s) may be a single statement or a block of statements. The condition may be any expression, and true is any non-zero value. The loop iterates while the condition is true.

When the condition becomes false, program control passes to the line immediately following the loop.

Flowchart of while Loop



Example:

var i = 1;

while(i <= 5){
    console.log(i + " ");
    i++;
}
// Prints 1 2 3 4 5 
do…while loop
The do…while loop is nearly identical to the while loop, but instead of checking the conditional statement before the loop starts, the do…while loop checks the conditional statement after the first run, then continuing onto another iteration.

The syntax of do...while loop is:

do {
  //body
} while (condition);
Flowchart of do…while loop



Example:

var i = 1;
do {
    console.log(i + " ");
    i++;
} while(i <= 5);   // the contition is being checked after the first run
When is do-while used?
A do-while loop is used where your loop should execute at least one time.

For example, let’s consider a scenario where we want to take an integer input from the user until the user has entered a positive number. 
In this case, we will use a do-while as we have to run loop at-least once because we want input from user at-least once. This loop will continue running until the user enters a positive number.
____________________________________________________________________________________________________________________________________________________________________________________________


ump statements are used to interrupt the normal flow of program.

Here we will discuss following Jump Statements

break
continue
Break Statement
The break statement is used inside loop or switch statement. When compiler finds the break statement inside a loop, compiler will abort the loop and continue to execute statements followed by loop.

Example:

var a = 1;  

while(a <= 10)  
{  
    if(a==5)  
        break;  
    a++;  
}  
console.log("Value of a is " + a);  
// Value of a is 5
Continue Statement
The continue statement is also used inside loop. When compiler finds the continue statement inside a loop, compiler will skip all the followling statements in the loop and resume the loop.

Example:

var a = 0;  
while(a < 10)  
{  
    a++;  
    if(a == 5)  
        continue;  

    console.log(a + " ");  
}  
// prints 1 2 3 4 6 7 8 9 10 