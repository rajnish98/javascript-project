In JavaScript we may use Arithmetic operators to perform arithmetic on numbers (literals or variables).

Operator	Description
+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation
/	Division
%	Modulus (Remainder)
++	Increment
--	Decrement
A typical arithmetic operation operates on two numbers.

The two numbers can be literals:
Example: var x = 1 + 7;
The two numbers can be variables:
Example: var x = n + m;
The two numbers can be variables:
Example: var x = (1 + 8) + n;
Operators and Operands
The numbers (in an arithmetic operation) are called operands.
The operation (to be performed between the two operands) is defined by an operator.
The addition operator (+) adds numbers:

Example:
 var x = 7;
 var y = 2;
 var z = x + y;
 // So z will store 9.
The subtraction operator (-) subtracts numbers:

Example:
 var x = 7;
 var y = 2;
 var z = x - y;
 // So z will store 5.
The multiplication operator (*) multiplies numbers:

Example:
 var x = 7;
 var y = 2;
 var z = x * y;
 // So z will store 14. 
The division operator (/) divides numbers:

Example:
 var x = 8;
 var y = 2;
 var z = x / y;
 // So z will store 4.
The modulus operator (%) returns the division remainder.

Example:
 var x = 7;
 var y = 2;
 var z = x % y;
 // So z will store 1.
The increment operator (++) increments numbers.

Example:
 var x = 5;
 x++;
 var z = x;
 // So z will store 6.
The decrement operator (–) decrements numbers.

Example:
 var x = 5;
 x--;
 var z = x;
 // So z will store 4. 
The exponentiation operator (**) raises the first operand to the power of the second operand.

Example:
 var x = 5;
 var z = x ** 2;
 // So z will store 25.   

____________________________________________________________________________________________________________________________________________________________________________________________
In JavaScript, we have math methods that can be used without actually creating them. It allows us to perform mathematical tasks on numbers.

Example: Math.LN2
It returns the natural logarithm of 2.
Some of the math properties(constants) are:

 Math.E        // returns Euler's number
 Math.PI       // returns PI
 Math.SQRT2    // returns the square root of 2
 Math.SQRT1_2  // returns the square root of 1/2
 Math.LN2      // returns the natural logarithm of 2
 Math.LN10     // returns the natural logarithm of 10
 Math.LOG2E    // returns base 2 logarithm of E
 Math.LOG10E   // returns base 10 logarithm of E 
Some of the Math methods are:

abs(x)        // Returns the absolute value of x
cbrt(x)       // Returns the cubic root of x
ceil(x)       // Returns x, rounded upwards to the nearest integer
clz32(x)      // Returns the number of leading zeros in a 32-bit binary representation of x
exp(x)        // Returns the value of Ex
expm1(x)      // Returns the value of Ex minus 1
floor(x)      // Returns x, rounded downwards to the nearest integer
fround(x)     // Returns the nearest (32-bit single precision) float representation of a number
log(x)        // Returns the natural logarithmof x
log10(x)      // Returns the base-10 logarithm of x
log1p(x)      // Returns the natural logarithm of 1 + x
log2(x)       // Returns the base-2 logarithm of x
pow(x, y)     // Returns the value of x to the power of y
random()      // Returns a random number between 0 and 1
round(x)      // Rounds x to the nearest integer
sign(x)       // Returns the sign of a number (checks whether it is positive, negative or zero)
sqrt(x)       // Returns the square root of x
trunc(x)      // Returns the integer part of a number (x)
max(x, y, z, ..., n)  // Returns the number with the highest value
min(x, y, z, ..., n)  // Returns the number with the lowest value
Example: Suppose we want to find the max among 1,7 and 77, then Math.max(1,7,77) will give us the required results.

Some of the Trigonometric methods are:

acos(x)       // Returns the arccosine of x, in radians
acosh(x)      // Returns the hyperbolic arccosine of x
asin(x)       // Returns the arcsine of x, in radians
asinh(x)      // Returns the hyperbolic arcsine of x
atan(x)       // Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)   // Returns the arctangent of the quotient of its arguments
atanh(x)      // Returns the hyperbolic arctangent of x
cos(x)        // Returns the cosine of x (x is in radians)
cosh(x)       // Returns the hyperbolic cosine of x
sin(x)        // Returns the sine of x (x is in radians)
sinh(x)       // Returns the hyperbolic sine of x
tan(x)        // Returns the tangent of an angle
tanh(x)       // Returns the hyperbolic tangent of a number
__________________________________________________________________________________________________________

Like other languages, JavaScript also supports bit-wise operations. In JavaScript, a number is stored as a 64-bit floating-point number but the bit-wise operation is performed on a 32-bit binary number i.e. to perform a bit-operation JavaScript converts the number into a 32-bit binary number (signed) and perform the operation and convert back the result to a 64-bit number.

BITWISE AND (&): When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.

Example: 
 var x = 5; // 101
 var y = 1; // 1
 var z = x&y; 
So here, 1 will be stored in z
BITWISE OR (|): When a bitwise OR is performed on a pair of bits, it returns 1 if atleast one of the bits is 1.

Example: 
 var x = 5; // 101
 var y = 1; // 1
 var z = x|y; 
So here, 5 will be stored in z
BITWISE XOR (^): When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different.

Example: 
 var x = 5; // 101
 var y = 1; // 1
 var z = x^y; 
So here, 4 will be stored in z
BITWISE NOT(~): Its is a unary operator i.e. accepts single operands. It flips the bits i.e 0 becomes 1 and 1 becomes 0.

NOTE: JavaScript binary numbers are stored in two’s complement format. This means that a negative number is the bitwise NOT of the number plus 1.

Example: 
 var x = 5; // 101
 var z = ~x; 
So here, -6 will be stored in z
(Zero Fill) Bitwise Left Shift (<<): One or more zero bits are pushed in from the right, and the leftmost bits fall off.

Example: 
 var x = 5; // 00000000000000000000000000000101
 var z = x<<1; // 00000000000000000000000000001010 
So here, 10 will be stored in z
(Sign Preserving) Bitwise Right Shift (>>): Copies of the leftmost bit are pushed in from the left, and the rightmost bits fall off.

Example: 
 var x = -5; // 11111111111111111111111111111011
 var z = x>>1; // 11111111111111111111111111111101 
So here, -3 will be stored in z
(Zero Fill) Right Shift (>>): One or more zero bits are pushed in from the left, and the rightmost bits fall off.

Example: 
 var x = 5; // 00000000000000000000000000000101
 var z = x>>1; // 00000000000000000000000000000010
So here, 2 will be stored in z 