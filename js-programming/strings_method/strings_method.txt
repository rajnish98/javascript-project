In JavaScript we also have strings which represents a sequence of characters. They can be used for storing and manipulating text.

There are 2 ways to create string in JavaScript:

By string literal: The string literal is created using double quotes.

Example: var stringname="string value"; 
By string object: It is done using new keyword. We will talk about objects more in later sections.

Example: var stringname=new String("string literal");  
String Length: To find the length of a string, we may use length property.

Example:
 var x = "abcd";
 var z = x.length;
Here, 4 will be stored in z.
Note: Suppose we store “I am “Adarsh” Chaudhary” in some variable then only “I am “ will be stored. To avoid this situation we use backslash escape character. It makes special charatcer into string characters. So here we should use “I am "Adarsh" Chaudhary”.


____________________________________________________________________________________________________________________________________________________________________________________________

JavaScript provides a lot of string methods which help in working with strings. Some of them are:

charAt(): It provides the char value present at the specified index.
charCodeAt(): It provides the Unicode value of a character present at the specified index.
concat(): It provides a combination of two or more strings.
indexOf(): It provides the position of a char value present in the given string.
lastIndexOf(): It provides the position of a char value present in the given string by searching a character from the last position.
search(): It searches a specified regular expression in a given string and returns its position if a match occurs.
match(): It searches a specified regular expression in a given string and returns that regular expression if a match occurs.
replace(): It replaces a given string with the specified replacement.
substr(): It is used to fetch the part of the given string on the basis of the specified starting position and length.
substring(): It is used to fetch the part of the given string on the basis of the specified index.
slice(): It is used to fetch the part of the given string. It allows us to assign positive as well negative index.
toLowerCase(): It converts the given string into lowercase letter.
toLocaleLowerCase(): It converts the given string into lowercase letter on the basis of host?s current locale.
toUpperCase(): It converts the given string into uppercase letter.
toLocaleUpperCase(): It converts the given string into uppercase letter on the basis of host?s current locale.
split(): It splits a string into substring array, then returns that newly created array.
trim(): It trims the white space from the left and right side of the string.
Examaple 1:
 var x ="Adarsh ";  
 var y ="Chaudhary";  
 var z = x.concat(y);  
Here z will store Adarsh Chaudhary.
Examaple 2:
 var x = "Adarsh Chaudhary";  
 var z = x.toUpperCase();  
Here z will store ADARSH CHAUDHARY.
Examaple 3:
 var x = "    Adarsh    ";  
 var z = x.trim();  
Here z will store Adarsh. 

____________________________________________________________________________________________________________________________________________________________________________________________

As we all know, regular expression is a sequence of characters that forms a search pattern. Here in JavaScript the search pattern can be used for text search and text replace operations in much powerful way.

SYNTAX: /pattern/modifiers;

Example: var patt = /adarsh/i;
Here, adarsh is a pattern and i is a modifier(represents make search case-insensitive)
We can combine REGEX with string methods like search() and replace() to make our operations easy.

Using search(): The search() method searches a string for a specified value and returns the position of the match.

Example: 
 var str = "I'm Adarsh!";
 var z = str.search("/adarsh/i");
Here, 4 will be stored in z as adarsh is presentin original string. Please note here we have used modifier i due to which Adarsh can search adarsh.
Using replace(): The replace() method replaces a specified value with another value in a string.

Example: 
 var str = "I'm Adarsh";
 var z = str.replace(/adarsh/i, "Harshdeep");
Here, I'm Harshdeep will be stored in z  variable.
Some of the REGEX patterns are:

[abc]: Find any of the characters between the brackets.
[0-9]: Find any of the digits between the brackets.
(x|y): Find any of the alternatives separated with |.
\d: Find a digit.
\s: Find a whitespace character.
\b: Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b.
\uxxxx: Find the Unicode character specified by the hexadecimal number xxxx.
test(): We have a special feature in JavaScript of test() method. It searches a string for a pattern, and returns true or false, depending on the result.

Example: 
 var patt = /e/;
 patt.test("Sun and Moon are friend");
Since there is an "e" in the string, the output of the code above will be: true
Also please note we may use let new RegExp(pattern, “modifier”) to create our own REGEX with required pattern and modifier.